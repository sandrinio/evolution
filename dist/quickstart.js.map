{"version":3,"sources":["../quickstart.js"],"names":["fs","require","readline","google","googleAuth","googleapi","SCOPES","TOKEN_DIR","process","env","HOME","HOMEPATH","USERPROFILE","TOKEN_PATH","readFile","processClientSecrets","err","content","console","log","authorize","JSON","parse","listLabels","credentials","callback","clientSecret","installed","client_secret","clientId","client_id","redirectUrl","redirect_uris","auth","oauth2Client","OAuth2","token","getNewToken","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","stdin","output","stdout","question","code","close","getToken","storeToken","mkdirSync","writeFile","stringify","gmail","users","labels","list","userId","response","length","i","label","name","module","exports"],"mappings":"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","file":"quickstart.js","sourcesContent":["var fs = require('fs');\nvar readline = require('readline');\nvar google = require('googleapis');\nvar googleAuth = require('google-auth-library');\n\n// If modifying these scopes, delete your previously saved credentials\n// at ~/.credentials/gmail-nodejs-quickstart.json\n\nfunction googleapi() {\n\n\nvar SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];\nvar TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||\n    process.env.USERPROFILE) + '/.credentials/';\nvar TOKEN_PATH = TOKEN_DIR + 'gmail-nodejs-quickstart.json';\n\n// Load client secrets from a local file.\nfs.readFile('client_secret.json', function processClientSecrets(err, content) {\n   if (err) {\n      console.log('Error loading client secret file: ' + err);\n      return;\n   }\n   // Authorize a client with the loaded credentials, then call the\n   // Gmail API.\n   authorize(JSON.parse(content), listLabels);\n});\n\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n *\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\nfunction authorize(credentials, callback) {\n   var clientSecret = credentials.installed.client_secret;\n   var clientId = credentials.installed.client_id;\n   var redirectUrl = credentials.installed.redirect_uris[0];\n   var auth = new googleAuth();\n   var oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);\n\n   // Check if we have previously stored a token.\n   fs.readFile(TOKEN_PATH, function(err, token) {\n      if (err) {\n         getNewToken(oauth2Client, callback);\n      } else {\n         oauth2Client.credentials = JSON.parse(token);\n         callback(oauth2Client);\n      }\n   });\n}\n\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n *\n * @param {google.auth.OAuth2} oauth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback to call with the authorized\n *     client.\n */\nfunction getNewToken(oauth2Client, callback) {\n   var authUrl = oauth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: SCOPES\n   });\n   console.log('Authorize this app by visiting this url: ', authUrl);\n   var rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n   });\n   rl.question('Enter the code from that page here: ', function(code) {\n      rl.close();\n      oauth2Client.getToken(code, function(err, token) {\n         if (err) {\n            console.log('Error while trying to retrieve access token', err);\n            return;\n         }\n         oauth2Client.credentials = token;\n         storeToken(token);\n         callback(oauth2Client);\n      });\n   });\n}\n\n/**\n * Store token to disk be used in later program executions.\n *\n * @param {Object} token The token to store to disk.\n */\nfunction storeToken(token) {\n   try {\n      fs.mkdirSync(TOKEN_DIR);\n   } catch (err) {\n      if (err.code != 'EEXIST') {\n         throw err;\n      }\n   }\n   fs.writeFile(TOKEN_PATH, JSON.stringify(token));\n   console.log('Token stored to ' + TOKEN_PATH);\n}\n\n/**\n * Lists the labels in the user's account.\n *\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\n */\nfunction listLabels(auth) {\n   var gmail = google.gmail('v1');\n   gmail.users.labels.list({\n      auth: auth,\n      userId: 'me',\n   }, function(err, response) {\n      if (err) {\n         console.log('The API returned an error: ' + err);\n         return;\n      }\n      var labels = response.labels;\n      if (labels.length == 0) {\n         console.log('No labels found.');\n      } else {\n         console.log('Labels:');\n         for (var i = 0; i < labels.length; i++) {\n            var label = labels[i];\n            console.log('- %s', label.name);\n         }\n      }\n   });\n}\nreturn googleapi();\n}\n\nmodule.exports = googleapi();"]}